<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" 
	"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
	<!-- "log4j.dtd" 라고 적어준 경우 dtd 파일을 찾을수 없다는 에러 발생. 그래서 절대 경로 적어줌-->
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 
		Appender : 로그를 출력하는 도구(위치 결정 도구)
		- ...Appender라는 이름을 가짐
		- ConsoleAppender : 출력을 콘솔창에 수행
		- FileAppender : 출력을 파일에 수행
		- DailyRollingFileAppender : 출력을 일정 기간 단위의 파일에 수행
		- JdbcAppender : 출력을 DB에 수행
		- SMTPAppender :  출력을 이메일에 수행
		- NTEventAppender : 출력을 윈도우 시스템 로그에 수행
		
		Layout : 출력 형식 / Layout을 통하여 출력되는 메시지의 형태를 설정할 수 있다.
		그 중 패턴을 지정할 수 있는 PatternLayout의 주요 형식은 다음과 같다.
		
		- %p : priority, 메시지 수준(Level)
		- %m : message, 출력하고자 하는 메시지
		- %n : newline, 개행(엔터)
		- %c : category, 카테고리 출력, 뒤에 {n}를 붙이면 패키지 깊이(depth)를 설정할 수 있음
		- %d : date, 시간 설정(자바 시간양식과 동일. SimpleDateFormat 참조)
				- y(연), M(월), d(일), E(요일), a(오전/오후) 
				- H(24시), h(12시), m(분), s(초), S(밀리초)
				
		- %5p : 메시지 수준을 +5 형식으로 출력(5칸에 우측(+) 정렬)
		- %-5p : 메시지 수준을 -5 형식으로 출력(5칸에 좌측(-) 정렬)
		
	-->

	<!-- Appenders / appender 태그는 로그 출력 도구이다. -->
	<!-- ConsoleAppender는 콘솔에 출력을 수행하는 appender이다. -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" /> <!-- target 설정 -  표준 출력 통로(System.out)을 지정하여 메시지가 콘솔 화면에 출력되도록 설정한다. -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] %c - %m%n" />
		</layout>
	</appender>
	
	<!-- FileAppender / 파일에 출력을 수행하는 도구 -->
	<appender name="xml" class="org.apache.log4j.FileAppender">
	    <param name="file" value="/tmp/bibaboo-log.xml"></param> <!-- 파일에 출력할때 경로 지정 -->
	    <param name="Append" value="true"></param> <!-- 로그를 덧붙일 것인지(Append), 덮어쓸 것인지(Overwrite) 설정할 수 있다. -->
	    <layout class="org.apache.log4j.xml.XMLLayout"></layout>
	</appender>
	
	<!-- DailyRollingFileAppender / 파일에 일자별로 출력을 수행하는 도구 -->
	<appender name="daily" class="org.apache.log4j.DailyRollingFileAppender">
	    <param name="file" value="/tmp/bibaboo-log/daily"></param> <!-- 파일에 출력할때 경로 지정 -->
	    <param name="Append" value="true"></param> <!-- 로그를 덧붙일 것인지(Append), 덮어쓸 것인지(Overwrite) 설정할 수 있다. -->
	    <!-- 파일의 날짜 패턴 -->
	    <param name="DatePattern" value="'.'yyyy-MM-dd'.log'"></param>
	    <layout class="org.apache.log4j.PatternLayout">
	        <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] %c - %m%n" />
	    </layout>
	</appender>
	
	<!-- 3rdparty Loggers / logger 설정을 이용해서 패키지별 또는 써드파티(3rd party)의 Logging level을 설정할 수 있다.
	다시 말해, 어떤 패키지 이하의 클래스에서 어떤 레벨 이상의 로그를 출력할지를 결정할 때 logger 엘리먼트를 사용한다. 
	만약 생략할 경우 root 설정을 따라간다.-->
	 <!-- org.springframework.core로 시작하는 패키지에 속한 클래스가 출력하는 로그는 warn 이상의 레벨 로그를 출력하라는 의미 -->
	<logger name="org.springframework.core">
		<level value="warn" />
	</logger>	
	
	 <!-- org.springframework.beans로 시작하는 패키지에 속한 클래스가 출력하는 로그는 warn 이상의 레벨 로그를 출력하라는 의미 -->
	<logger name="org.springframework.beans">
		<level value="warn" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="warn" />
	</logger>

	<logger name="org.springframework.web">
		<level value="warn" />
	</logger>
	
	<!-- Root Logger / 로그 메시지의 출력 수준과 방식을 설정할 수 있다. -->
	<root>
		<priority value="debug" /> <!-- priority : 로그 출력 수준을 지정 -->
		<appender-ref ref="console" /> <!-- appender-ref : 로그 출력 Appender의 id를 설정. 복수 개 설정 가능 -->
        <!-- <appender-ref ref="daily" /> -->
	</root>
	
	<!-- 
	
		로그 레벨 (Logging Level)
		
		Logging에서는 메시지를 단순 출력하는 것이 아니라 
		심각도 수준(Level)을 부여하여 상황에 맞게 사용하도록 지원하고 있다.
		Log4j에서 사용하는 수준은 총 6가지이다.
		
		- trace : 일상적인 모든 활동에 대한 기록
		- debug : 개발에 사용하는 추적 메시지
		- info : 사용자가 알아야 할 정보 메시지
		- warn : 오류가 발생할 우려가 있는 경고 메시지
		- error : 프로세스 처리 중 발생한 오류 메시지
		- fatal : 시스템이 다운될 수 있는 치명적 오류 메시지
		
		- 메시지 수준을 debug로 설정하면, debug 또는 그보다 심각한 수준의 메시지가 출력된다.
			ex) debug, info, warn, error, fatal
		- 메시지 수준을 warn으로 설정하면, warn 또는 그보다 심각한 수준의 메시지가 출력된다.
			ex) warn, error, fatal
	
	 -->

</log4j:configuration>
