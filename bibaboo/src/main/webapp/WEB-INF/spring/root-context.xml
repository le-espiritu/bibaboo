<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation=
	"http://www.springframework.org/schema/mvc
	https://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Root Context -->
	<!-- root context에는 스프링 웹 기술에서 완전히 독립적인 비즈니스 서비스 계층과 데이터 액세스 계층관 관련된 설정들이 담긴다. -->
	
	<!-- 빈 등록 / component-scan은 특정 패키지 안의 클래스들을 스캔하고, Annotation을 확인 후 bean 인스턴스를 생성한다 -->
	<context:component-scan base-package="com.project.bibaboo">
		<!-- exclude-filter를 사용해 @Controller를 스캔대상에서 제외시켰고, 나머지 애노테이션들은 디폴트로 스캔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!--dataSource 빈 등록 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/bibaboodb"></property>
		<property name="username" value="bibaboouser"></property>
		<property name="password" value="bibaboo123!@#"></property>
		
		<property name="maxTotal" value="20"></property> <!-- maxTotal : 유지할 Connection Pool의 최대 크기 -->
		<property name="maxIdle" value="10"></property> <!-- maxIdle : 유지할 Connection Pool 내부의 유휴 연결 개수 -->
		<property name="maxWaitMillis" value="3000"></property> <!-- maxWaitMillis : Connection Pool의 모든 연결이 사용중일 때의 대기시간(ms) -->
	</bean>
	
	<!-- transactionManager(트랜잭션 관리 객체) 빈 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- @Transactional 어노테이션 처리 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- spring에서 MyBatis의 핵심클래스인 SqlSession사용할 수 있도록 하기 위해서 등록  
	        SqlSession객체를 만들어서 리턴하는 Factory객체  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml"/>
	</bean>
	
	<!-- MyBatis에서 sql문을 처리하기 위한 핵심 클래스 (SqlSessionTemplate객체) 생성-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	
</beans>