<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1">
	<display-name>bibaboo</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- 설정의 분리 / 설정을 분리하는 이유는 스프링 웹 서블릿 컨텍스트를 통째로 다른 기술로 대체할 수 있도록 하기 위함이다. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
	  		/WEB-INF/spring/root-context.xml
	  		/WEB-INF/spring/security-context.xml
	  	</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- 프론트 컨트롤러 DispatcherServlet 정의 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name> <!-- 컨텍스트 관련 설정 위치를 의미하고 이 이름은 정해져있음 -->
			<param-value>
	  			/WEB-INF/spring/appServlet/servlet-context.xml
	  		</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup> <!-- 서비스가 시작되자마자 서블릿 컨테이너가 로딩할 수 있도록 하는 설정 -->
	</servlet>

	<!-- 서블릿 매핑 (/매핑은 default servlet 동작) -->
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 스프링 인코딩 필터 정의 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- HTTP Method Filter -->
	<filter>
		<filter-name>httpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>httpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 스프링 시큐리티 필터 -->
	<!-- 자바 컨피그 설정에서는 Abstractsecuritywebapplicationinitializer를 상속받은 클래스를 작성하여 해당 설정을 대신한다. -->
	<!-- springSecurityFilterChain이라는 이름으로 DelegatingFilterProxy 클래스를 필터로 등록하고, 전체 경로에 매핑해준다. 
		클라이언트의 모든 요청이 해당 필터를 거치게 된다. 
		
		DelegatingFilterProxy는 서블릿 필터이므로 스프링 컨테이너의 제어를 받지 않습니다. 
		(서블릿 필터는 서블릿 스펙이기 때문에 스프링에서 정의된 빈을 주입받아 사용할 수 없다.) 
		때문에 스프링 시큐리티는 DelegatingFilterProxy를 통해 서블릿 컨테이너에서 필터로서 요청을 취득하고,
		스프링 컨테이너에 존재하는 특정 빈(springSecurityFilterChain)을 찾아 요청을 위임한다. 
		
		DelegatingFilterProxy는 스프링에서 지원하는 특수 필터인 FilterChainProxy를 감싸고 있어서 FilterChainProxy에 요청을 위임한다.
		FilterChainProxy는 스프링 빈이므로, 스프링 컨테이너의 제어를 받아서 의존성 빈을 주입할 수 있습니다
		시큐리티에서는 springSecurityFilterChain이라는 이름의 객체가 FilterChainProxy를 구현하여 스프링 빈으로 등록되어 있으며, 
		DelegatingFilterProxy가 해당 빈을 대리자로 등록하기 위해서는 필터이름을 빈의 이름과 동일하게 설정하면 됩니다. 
		이러한 이유로 filter-name을 springSecurityFilterChain로 등록합니다.
	-->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>